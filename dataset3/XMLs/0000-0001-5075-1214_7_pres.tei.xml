<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/sda1/Dissertation/grobid/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Balancing and clustering of words: a combinatorial analysis of the Burrows &amp; Wheeler Transform</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanna</forename><surname>Rosone</surname></persName>
							<email>giovanna@math.unipa.it</email>
							<affiliation key="aff0">
								<orgName type="department">Dipartimento di Matematica e Informatica Dottorato di Ricerca in Matematica e Informatica</orgName>
								<orgName type="institution">Uni versi tà degli Studi di Palermo</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Balancing and clustering of words: a combinatorial analysis of the Burrows &amp; Wheeler Transform</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-23T23:44+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Burrows-Wheeler Transform (BWT)</head><p>The BWT is a well known transformation introduced in [M. Burrows and D. Wheeler, A block sorting data compression algorithm, Technical report, <ref type="bibr">DIGITAL System Research Center, 1994]</ref> The BWT is a reversible transformation that produces a permutation bwt(v) of an input sequence v, defined over an ordered alphabet A, so that occurrences of a given symbol tend to occur in clusters in the output sequence.</p><p>Traditionally the major application of the Burrows-Wheeler Transform has been for Data Compression. The BWT represents for instance the heart of the BZIP2 algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Burrows-Wheeler Transform (BWT)</head><p>The BWT is a well known transformation introduced in [M. Burrows and D. Wheeler, A block sorting data compression algorithm, Technical report, <ref type="bibr">DIGITAL System Research Center, 1994]</ref> The BWT is a reversible transformation that produces a permutation bwt(v) of an input sequence v, defined over an ordered alphabet A, so that occurrences of a given symbol tend to occur in clusters in the output sequence.</p><p>Traditionally the major application of the Burrows-Wheeler Transform has been for Data Compression. The BWT represents for instance the heart of the BZIP2 algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Burrows-Wheeler Transform (BWT)</head><p>The BWT is a well known transformation introduced in [M. Burrows and D. Wheeler, A block sorting data compression algorithm, Technical report, <ref type="bibr">DIGITAL System Research Center, 1994]</ref> The BWT is a reversible transformation that produces a permutation bwt(v) of an input sequence v, defined over an ordered alphabet A, so that occurrences of a given symbol tend to occur in clusters in the output sequence.</p><p>Traditionally the major application of the Burrows-Wheeler Transform has been for Data Compression. The BWT represents for instance the heart of the BZIP2 algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Preliminaries</head><p>Let A denote a non-empty finite set of symbols. The elements of A are called letters (symbols or characters) and the set A is called an alphabet.</p><p>A word over an alphabet A is a finite sequence of letters from A.</p><p>The empty word ε is the empty sequence.</p><p>Two words u, v ∈ A * are conjugate, if u = xy and v = yx for some x, y ∈ A * . Thus conjugate words are just cyclic shifts of one another. <ref type="bibr">Let [v]</ref> denote the conjugacy classes of v.</p><p>A conjugacy class can also be represented as a circular word. Hence in what follows we will use "circular word" and "conjugacy class" as synonym.</p><p>How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4.</p><p>Each row of M is a conjugate of v in lexicographic order.</p><p>How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order.</p><p>How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order.</p><p>How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a M 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order. How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a M F L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4.</p><p>Each row of M is a conjugate of v in lexicographic order. How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that denotes the position of the original word v after the lexicographical sorting of its conjugates.</p><p>Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a M F L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I →4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order. How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that denotes the position of the original word v after the lexicographical sorting of its conjugates.</p><p>Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a M F L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I →4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order. How does BWT work?</p><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that denotes the position of the original word v after the lexicographical sorting of its conjugates.</p><p>Example: v = international i n t e r n a t i o n a l n t e r n a t i o n a l i t e r n a t i o n a l i n e r n a t i o n a l i n t r n a t i o n a l i n t e n a t i o n a l i n t e r a t i o n a l i n t e r n t i o n a l i n t e r n a i o n a l i n t e r n a t o n a l i n t e r n a t i n a l i n t e r n a t i o a l i n t e r n a t i o n l i n t e r n a t i o n a M F L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I →4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a bwt(v) = L = nntltaoriiena and I = 4. Each row of M is a conjugate of v in lexicographic order.</p><p>G. Rosone Palermo, 17 Marzo 2010 4 / 1 Properties BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that is useful in order to recover the original word v.</p><formula xml:id="formula_0">Example: v = international bwt(v) = L = nntltaoriiena and I = 4</formula><p>The first character of v is F [I].</p><p>For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.</p><formula xml:id="formula_1">For all i = I, the character L[i] is followed in v by F [i]; F M L ↓</formula><p>↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I → 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Properties</head><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that is useful in order to recover the original word v.</p><p>Example: v = international bwt(v) = L = nntltaoriiena and I = 4</p><p>The first character of v is F [I].</p><p>For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.</p><formula xml:id="formula_2">For all i = I, the character L[i] is followed in v by F [i]; F M L ↓</formula><p>↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I → 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Properties</head><p>BWT takes as input a text v and produces: a permutation bwt(v) of the letters of v. the index I, that is useful in order to recover the original word v.</p><p>Example: v = international bwt(v) = L = nntltaoriiena and I = 4</p><p>The first character of v is F [I].</p><p>For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.</p><formula xml:id="formula_3">For all i = I, the character L[i] is followed in v by F [i]; F M L ↓</formula><p>↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t I → 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a Reverse bwt(v) = L = nntltaoriiena and I = 4.</p><p>The first character of v is F [I].</p><p>For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.  For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L. Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words. For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.   The factor ot is normally preceded by n, but occasionally by h, g or j.</p><formula xml:id="formula_4">For all i = I, the character L[i] is followed in v by F [i]; v = inte</formula><formula xml:id="formula_5">For all i = I, the character L[i] is followed in v by F [i]; v = inter</formula><formula xml:id="formula_6">For all i = I, the character L[i] is followed in v by F [i]; v = inter</formula><formula xml:id="formula_7">For all i = I, the character L[i] is followed in v by F [i]; v = intern</formula><formula xml:id="formula_8">For all i = I, the character L[i] is followed in v by F [i]; v = intern</formula><formula xml:id="formula_9">For all i = I, the character L[i] is followed in v by F [i]; v = interna</formula><formula xml:id="formula_10">For all i = I, the character L[i] is followed in v by F [i]; v = interna</formula><formula xml:id="formula_11">For all i = I, the character L[i] is followed in v by F [i]; v = internat</formula><formula xml:id="formula_12">For all i = I, the character L[i] is followed in v by F [i]; v = internat</formula><formula xml:id="formula_13">For all i = I, the character L[i] is followed in v by F [i]; v = internati</formula><formula xml:id="formula_14">For all i = I, the character L[i] is followed in v by F [i]; v = internati</formula><formula xml:id="formula_15">For all i = I, the character L[i] is followed in v by F [i]; v = internatio</formula><formula xml:id="formula_16">For all i = I, the character L[i] is followed in v by F [i]; v = internatio</formula><formula xml:id="formula_17">For all i = I, the character L[i] is followed in v by F [i]; v = internation</formula><formula xml:id="formula_18">For all i = I, the character L[i] is followed in v by F [i]; v = internation</formula><formula xml:id="formula_19">For all i = I, the character L[i] is followed in v by F [i]; v = internationa</formula><formula xml:id="formula_20">For all i = I, the character L[i] is followed in v by F [i]; v = internationa</formula><formula xml:id="formula_21">For all i = I, the character L[i] is followed in v by F [i]; v = international</formula><formula xml:id="formula_22">For all i = I, the character L[i] is followed in v by F [i]; v = international</formula><p>The characters preceding ot are grouped together.</p><p>Extensive experimental work confirms this "clustering effect" (M. Burrows and D. Wheeler,1994, P. Fenwick, 1996).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G. Rosone</head><p>Palermo, 17 Marzo 2010 7 / 1</p><p>The Burrows-Wheeler Transform </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answers</head><p>What kind of regularity is there?</p><p>The solution: Balance of the input text.</p><p>Our idea is that one obtains a more compressible string as output of BWT if its input is very close to be balanced.</p><p>Is there a more appropriate statistic?</p><p>The solution: Local Entropy of the input text.</p><p>We introduce the notion of local entropy as a measure of the degree of balance of a text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.</p><p>G. Rosone Palermo, 17 Marzo 2010 10 / 1</p><p>The Burrows-Wheeler Transform</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BWT-based compression</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answers</head><p>What kind of regularity is there?</p><p>The solution: Balance of the input text.</p><p>Our idea is that one obtains a more compressible string as output of BWT if its input is very close to be balanced.</p><p>Is there a more appropriate statistic?</p><p>The solution: Local Entropy of the input text.</p><p>We introduce the notion of local entropy as a measure of the degree of balance of a text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.</p><p>G. Rosone Palermo, 17 Marzo 2010 10 / 1</p><p>The Burrows-Wheeler Transform</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BWT-based compression</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answers</head><p>What kind of regularity is there?</p><p>The solution: Balance of the input text.</p><p>Our idea is that one obtains a more compressible string as output of BWT if its input is very close to be balanced.</p><p>Is there a more appropriate statistic?</p><p>The solution: Local Entropy of the input text.</p><p>We introduce the notion of local entropy as a measure of the degree of balance of a text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.</p><p>G. Rosone Palermo, 17 Marzo 2010 10 / 1</p><p>The Burrows-Wheeler Transform</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BWT-based compression</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answers</head><p>What kind of regularity is there?</p><p>The solution: Balance of the input text.</p><p>Our idea is that one obtains a more compressible string as output of BWT if its input is very close to be balanced.</p><p>Is there a more appropriate statistic?</p><p>The solution: Local Entropy of the input text. We introduce the notion of local entropy as a measure of the degree of balance of a text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.</p><p>G. Rosone Palermo, 17 Marzo 2010 10 / 1</p><p>The Burrows-Wheeler Transform</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BWT-based compression</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Answers</head><p>What kind of regularity is there?</p><p>The solution: Balance of the input text.</p><p>Our idea is that one obtains a more compressible string as output of BWT if its input is very close to be balanced.</p><p>Is there a more appropriate statistic?</p><p>The solution: Local Entropy of the input text. We introduce the notion of local entropy as a measure of the degree of balance of a text.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Extremal cases: Constant gap words and Clustered words</head><p>A finite word v is constant gap if, for each letter a, the distance (the number of letters) between two consecutive occurrences of a is constant (in circular way).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word v = abcabdabcabe is a constant gap word.</p><p>Constant gap words are a special case of circularly balanced words.</p><p>The word v is a clustered word if the number of runs is equal to the size of alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = ddddddccccaaaaabbb is a clustered word. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Extremal cases: Constant gap words and Clustered words</head><p>A finite word v is constant gap if, for each letter a, the distance (the number of letters) between two consecutive occurrences of a is constant (in circular way).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word v = abcabdabcabe is a constant gap word.</p><p>Constant gap words are a special case of circularly balanced words.</p><p>The word v is a clustered word if the number of runs is equal to the size of alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = ddddddccccaaaaabbb is a clustered word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Statistic: Local Entropy based on Distance Coding</head><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example Statistic: Local Entropy based on Distance Coding</p><formula xml:id="formula_23">v = a c b c a a b dc(v) = Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example Statistic: Local Entropy based on Distance Coding</p><formula xml:id="formula_24">v = a c b c a a b dc(v) = 1 Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example</p><formula xml:id="formula_25">v = a c b c a a b dc(v) = 1 4 Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v: </p><formula xml:id="formula_26">LE(v) = 1 n n i=1 log(d i + 1)</formula><formula xml:id="formula_27">Example v = a c b c a a b dc(v) = 1 4 2 Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v:</p><formula xml:id="formula_28">LE(v) = 1 n n i=1 log(d i + 1)</formula><p>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. <ref type="bibr">Wei, 1986</ref><ref type="bibr">G. Manzini, 2001</ref><ref type="bibr">H. Kaplan, S. Landau and E. Verbin, 2007</ref> Statistic: Local Entropy based on Distance Coding</p><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example v = a c b c a a b dc(v) = 1 4 2 1</p><formula xml:id="formula_29">Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v:</p><formula xml:id="formula_30">LE(v) = 1 n n i=1 log(d i + 1)</formula><p>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. <ref type="bibr">Wei, 1986</ref><ref type="bibr">G. Manzini, 2001</ref><ref type="bibr">H. Kaplan, S. Landau and E. Verbin, 2007</ref> Statistic: Local Entropy based on Distance Coding</p><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example v = a c b c a a b dc(v) = 1 4 2 1 3</p><formula xml:id="formula_31">Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v:</p><formula xml:id="formula_32">LE(v) = 1 n n i=1 log(d i + 1)</formula><p>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. <ref type="bibr">Wei, 1986</ref><ref type="bibr">G. Manzini, 2001</ref><ref type="bibr">H. Kaplan, S. Landau and E. Verbin, 2007</ref> Statistic: Local Entropy based on Distance Coding</p><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example v = a c b c a a b dc(v) = 1 4 2 1 3 0</p><formula xml:id="formula_33">Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v:</p><formula xml:id="formula_34">LE(v) = 1 n n i=1 log(d i + 1)</formula><p>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. <ref type="bibr">Wei, 1986</ref><ref type="bibr">G. Manzini, 2001</ref><ref type="bibr">H. Kaplan, S. Landau and E. Verbin, 2007</ref> Statistic: Local Entropy based on Distance Coding</p><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example v = a c b c a a b dc(v) = 1 4 2 1 3 0 3</p><formula xml:id="formula_35">Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v:</p><formula xml:id="formula_36">LE(v) = 1 n n i=1 log(d i + 1)</formula><p>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. <ref type="bibr">Wei, 1986</ref><ref type="bibr">G. Manzini, 2001</ref><ref type="bibr">H. Kaplan, S. Landau and E. Verbin, 2007</ref> Statistic: Local Entropy based on Distance Coding</p><p>Distance coding: for each symbol of the input word, the DC algorithm outputs the distance to the previous occurrence of the same symbol (in circular way).</p><p>Example v = a c b c a a b dc(v) = 1 4 2 1 3 0 3</p><formula xml:id="formula_37">Let v = b 1 b 2 · · · b n , b i ∈ A and dc(v) = d 1 d 2 · · · d n , where 0 ≤ d i &lt; n.</formula><p>Define the Local Entropy of v: Bounds Theorem For any word v one has:</p><formula xml:id="formula_38">LE(v) = 1 n n i=1 log(d i + 1)</formula><formula xml:id="formula_39">G(v) ≤ LE(v) ≤ H 0 (v) LE(v) = H 0 (v) if and only if v is a constant gap word. LE(v) = G(v) if and only if v is a clustered word.</formula><p>where</p><formula xml:id="formula_40">H 0 (v) = a∈A |v| a |v| log |v| |v| a , G(v) = a∈A 1 |v| [log(|v| − |v| a + 1)]</formula><p>The notion of local entropy is a measure of the degree of balance of a text.</p><p>|v| a denotes the number of occurrences of the letter a in the word v.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Measure</head><p>For any word v:</p><formula xml:id="formula_41">δ(v) = H 0 (v)−LE(v) H 0 (v)−G(v) , τ (v) = LE(v)−G(v) H 0 (v)−G(v)</formula><p>Now, by using δ and τ , we can test, in a quantitative way, our intuition, i.e. the more balanced the input word is, the more local similarity is found in the BWT of the string, the better the compression is.</p><p>The experiments reported in the next slide confirm our intuition: actually they show that when δ(v) is less than 0.23, then τ (bwt(v)) is less than 0.3 and the BWT-based compressor has good performances. Practical application: the computation of δ(v) is a fast test for the choice between bst and gzip.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>First conclusions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Our intuition</head><p>The more balanced the input word is, the more local similarity one has after BWT, and the better the compression is.</p><p>The notion of local entropy is a measure of the degree of balance of a text. Given a word v ∈ {a, b}, the following conditions are equivalent:</p><formula xml:id="formula_42">1 bwt(v) = b p a q , with p, q ≥ 1;</formula><p>2 v is a circularly balanced word;</p><p>3 v is a conjugate of a power of a Standard words.</p><p>Example v = abaababa is a standard word and bwt(v) = b 3 a 5 . We note that the notion of circularly balanced words over an alphabet of size larger than two also appears in the statement of the Fraenkel's conjecture.</p><p>As a direct consequence of a result of Graham, one has that balanced sequences on a set of letters having different frequencies must be periodic, i.e. of the form v ω , where v is a circularly balanced word.</p><p>Fraenkel's conjecture Let A k = {a 1 , a 2 , . . . , a k }. For each k &gt; 2, there is only one circularly balanced word F k ∈ A * k , having different frequencies. It is defined recursively as follow F 1 = a 1 and F k = F k−1 a k F k−1 for all k ≥ 2.</p><p>Generalization to alphabets with more than two letters <ref type="bibr">Theorem (S. Mantaci, A. Restivo and M. Sciortino, 2003)</ref> Given a word v ∈ {a, b}, the following conditions are equivalent:</p><p>1 v is a Simple BWT word;</p><p>2 v is a circularly balanced word;</p><p>3 v is a conjugate of a power of a Standard words.</p><p>In alphabets with more than two letters, the following sets do not coincide: 1 simple BWT words; 2 circularly balanced words; 3 finite epistandard words (a generalization of the Standard words).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>G. Rosone</head><p>Palermo, 17 Marzo 2010 21 / 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Simple BWT words</head><p>In 2008, Simpson and Puglisi introduced the notion of Simple BWT words.</p><p>Let v be a word over a finite ordered alphabet A = {a 1 , a 2 , . . . , a k }, with a 1 &lt; a 2 &lt; . . . &lt; a k . The word v is a simple BWT word if bwt(v) = a n k k a n k−1 k−1 · · · a n 2 2 a n 1 1 for some non-negative integers n 1 , n 2 , . . . , n k .</p><p>We denote by S the set of the simple BWT words.</p><p>Example v = acbcbcadad ∈ S, in fact bwt(v) = ddcccbbaaa.</p><p>Simpson and Puglisi get a constructive characterization of the set S in the case of three letters alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Simple BWT words</head><p>In 2008, Simpson and Puglisi introduced the notion of Simple BWT words.</p><p>Let v be a word over a finite ordered alphabet A = {a 1 , a 2 , . . . , a k }, with a 1 &lt; a 2 &lt; . . . &lt; a k . The word v is a simple BWT word if bwt(v) = a n k k a n k−1 k−1 · · · a n 2 2 a n 1 1 for some non-negative integers n 1 , n 2 , . . . , n k .</p><p>We denote by S the set of the simple BWT words.</p><p>Example v = acbcbcadad ∈ S, in fact bwt(v) = ddcccbbaaa.</p><p>Simpson and Puglisi get a constructive characterization of the set S in the case of three letters alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Simple BWT words</head><p>In 2008, Simpson and Puglisi introduced the notion of Simple BWT words.</p><p>Let v be a word over a finite ordered alphabet A = {a 1 , a 2 , . . . , a k }, with a 1 &lt; a 2 &lt; . . . &lt; a k . The word v is a simple BWT word if bwt(v) = a n k k a n k−1 k−1 · · · a n 2 2 a n 1 1 for some non-negative integers n 1 , n 2 , . . . , n k .</p><p>We denote by S the set of the simple BWT words.</p><p>Example v = acbcbcadad ∈ S, in fact bwt(v) = ddcccbbaaa.</p><p>Simpson and Puglisi get a constructive characterization of the set S in the case of three letters alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Simple BWT words</head><p>In 2008, Simpson and Puglisi introduced the notion of Simple BWT words.</p><p>Let v be a word over a finite ordered alphabet A = {a 1 , a 2 , . . . , a k }, with a 1 &lt; a 2 &lt; . . . &lt; a k . The word v is a simple BWT word if bwt(v) = a n k k a n k−1 k−1 · · · a n 2 2 a n 1 1 for some non-negative integers n 1 , n 2 , . . . , n k .</p><p>We denote by S the set of the simple BWT words.</p><p>Example v = acbcbcadad ∈ S, in fact bwt(v) = ddcccbbaaa.</p><p>Simpson and Puglisi get a constructive characterization of the set S in the case of three letters alphabet.</p><p>Matrix M and R F M L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a 180 • F R R L R ↓ ↓ a n r e t n i l a n o i t n i l a n o i t a n r e t e t n i l a n o i t a n r i t a n r e t n i l a n o i l a n o i t a n r e t n r e t n i l a n o i t a n o i t a n r e t n i l a n a n o i t a n r e t n i l t a n r e t n i l a n o i l a n o i t a n r e t n i t n i l a n o i t a n r e n r e t n i l a n o i t a n o i t a n r e t n i l a</p><p>The matrix R is obtained from M by a rotation of 180 • : it follows that the ith conjugate of M is the reverse of the (n − i + 1)th conjugate of R. Matrix M and R F M L ↓ ↓ 1 a l i n t e r n a t i o n 2 a t i o n a l i n t e r n 3 e r n a t i o n a l i n t 4 i n t e r n a t i o n a l 5 i o n a l i n t e r n a t 6 l i n t e r n a t i o n a 7 n a l i n t e r n a t i o 8 n a t i o n a l i n t e r 9 n t e r n a t i o n a l i 10 o n a l i n t e r n a t i 11 r n a t i o n a l i n t e 12 t e r n a t i o n a l i n 13 t i o n a l i n t e r n a 180 • F R R L R ↓ ↓ a n r e t n i l a n o i t n i l a n o i t a n r e t e t n i l a n o i t a n r i t a n r e t n i l a n o i l a n o i t a n r e t n r e t n i l a n o i t a n o i t a n r e t n i l a n a n o i t a n r e t n i l t a n r e t n i l a n o i l a n o i t a n r e t n i t n i l a n o i t a n r e n r e t n i l a n o i t a n o i t a n r e t n i l a</p><p>The matrix R is obtained from M by a rotation of 180 • : it follows that the ith conjugate of M is the reverse of the (n − i + 1)th conjugate of R. Balanced and Simple BWT words</p><formula xml:id="formula_43">B = S</formula><p>The set of circularly balanced words over more than two letters alphabets does not coincide with the set of Simple BWT words.</p><p>Example v = cacbcac is circularly balanced and bwt(v) = ccccbaa w = ababc is circularly balanced and bwt(w) = cbaab u = acacbbc is not balanced and bwt(u) = cccbbaa Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word. Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word. Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word. Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word. Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word. Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Balancing and Epistandard</head><formula xml:id="formula_44">B = EP</formula><p>The set of circularly balanced words over more than two letters alphabets does not coincide with the set of conjugate of powers of epistandard words.</p><p>Example v = aadaacaad is epistandard, but it is not circularly balanced. u = abcabdabcabe is circularly balanced, but it is not epistandard.</p><p>G. Rosone Palermo, 17 Marzo 2010 28 / 1</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Palindromic Richness</head><p>The number of distinct palindromic factors (including ε) of a word v is at most |v| + 1.</p><p>A finite word v is (palindromic) rich if it has exactly |v| + 1 distinct palindromic factors, including the empty word ε.</p><p>A factor of finite rich word is rich.</p><p>Example v = ccaacb is rich, |v| = 6, in fact: P (v) = {ε, c, cc, caac, a, aa, b}, |P (v)| = 7. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Palindromic Richness</head><p>The number of distinct palindromic factors (including ε) of a word v is at most |v| + 1.</p><p>A finite word v is (palindromic) rich if it has exactly |v| + 1 distinct palindromic factors, including the empty word ε.</p><p>A factor of finite rich word is rich.</p><p>Example v = ccaacb is rich, |v| = 6, in fact: P (v) = {ε, c, cc, caac, a, aa, b}, |P (v)| = 7. For a finite word v, the following properties are equivalent:</p><p>1 v ω is rich;</p><p>2 v 2 is rich;</p><p>3 v is a product of two palindromes and all of the conjugates of v (including itself) are rich.</p><p>We say that a finite word v is circularly rich if the infinite word v ω is rich. We denote by R the set of the circularly rich words.</p><p>Example v = bbaca, |v| = 5 is circularly rich, in fact: P (v 2 ) = {ε, a, b, c, bb, aca, bacab, bbacabb, acabbaca, cabbac, abba}, |P (v 2 )| = 11.</p><p>Circularly rich words <ref type="bibr">Lemma (Glen, Justin, Widmer and Zamboni, 2009)</ref> For a finite word v, the following properties are equivalent:</p><p>1 v ω is rich;</p><p>2 v 2 is rich;</p><p>3 v is a product of two palindromes and all of the conjugates of v (including itself) are rich.</p><p>We say that a finite word v is circularly rich if the infinite word v ω is rich. We denote by R the set of the circularly rich words.</p><p>Example v = bbaca, |v| = 5 is circularly rich, in fact: P (v 2 ) = {ε, a, b, c, bb, aca, bacab, bbacabb, acabbaca, cabbac, abba}, |P (v 2 )| = 11.</p><p>Circularly rich words <ref type="bibr">Lemma (Glen, Justin, Widmer and Zamboni, 2009)</ref> For a finite word v, the following properties are equivalent:</p><p>1 v ω is rich;</p><p>2 v 2 is rich;</p><p>3 v is a product of two palindromes and all of the conjugates of v (including itself) are rich.</p><p>We say that a finite word v is circularly rich if the infinite word v ω is rich. We denote by R the set of the circularly rich words.</p><p>Example v = bbaca, |v| = 5 is circularly rich, in fact: P (v 2 ) = {ε, a, b, c, bb, aca, bacab, bbacabb, acabbaca, cabbac, abba}, |P (v 2 )| = 11.</p><p>Circularly rich words <ref type="bibr">Lemma (Glen, Justin, Widmer and Zamboni, 2009)</ref> For a finite word v, the following properties are equivalent:</p><p>1 v ω is rich;</p><p>2 v 2 is rich;</p><p>3 v is a product of two palindromes and all of the conjugates of v (including itself) are rich.</p><p>We say that a finite word v is circularly rich if the infinite word v ω is rich. We denote by R the set of the circularly rich words.</p><p>Example v = bbaca, |v| = 5 is circularly rich, in fact: P (v 2 ) = {ε, a, b, c, bb, aca, bacab, bbacabb, acabbaca, cabbac, abba}, |P (v 2 )| = 11.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Balancing and Richness</head><formula xml:id="formula_45">R = B</formula><p>The set of circularly balanced words over more than two letters alphabets does not coincide with the set of circularly rich words.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = bbbbbacaca is circularly rich, but it is not circularly balanced.</p><p>The word u = abcabdabcabe is circularly balanced, but it is not circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><formula xml:id="formula_46">S ∩ B = R ∩ B = EP ∩ B Theorem</formula><p>Let w ∈ A * be a circularly balanced word over A. The following statements are equivalent:</p><p>The palindromic right-closure v (+) of a finite word v is the (unique) shortest palindrome having v as a prefix (A. de Luca, 1997).</p><p>The iterated palindromic closure function (J. <ref type="bibr">Justin, 2005)</ref>, denoted by P al, is recursively defined as follows. Set P al(ε) = ε and, for any word v and letter x, define P al(vx) = (P al(v)x) (+) .</p><p>In order to prove that t belongs to S it suffices to show that words of the form (1), <ref type="formula">(2)</ref> and <ref type="formula">(3)</ref> have simple BWT.</p><p>The palindromic right-closure v (+) of a finite word v is the (unique) shortest palindrome having v as a prefix (A. de Luca, 1997).</p><p>The iterated palindromic closure function (J. <ref type="bibr">Justin, 2005)</ref>, denoted by P al, is recursively defined as follows. Set P al(ε) = ε and, for any word v and letter x, define P al(vx) = (P al(v)x) (+) .</p><p>In order to prove that t belongs to S it suffices to show that words of the form (1), <ref type="formula">(2)</ref> and <ref type="formula">(3)</ref> have simple BWT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof</head><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p><p>Proof: 1 → 2: If the word w belongs to S then w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem</head><p>If the word w belongs to S then w is circularly rich.</p><p>We know that w is circularly rich if and only if w is a product of two palindromes and all the conjugates of w (including itself) are rich. each word w ∈ S has the two palindrome property.</p><p>We prove that</p><p>If w ∈ S then all the conjugates of w (including itself) are rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Example</head><p>The word w = acbcbcadad ∈ S, in fact bwt(acbcbcadad) = ddcccbbaaa, and |w| 2 = 20, |P (w 2 )| = 21, so w is circularly rich.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Proof</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Synthesis</head><p>Under the condition of circularly balanced, the following statements are equivalent: w ∈ S (simple BWT word); w is circularly rich, w is a conjugate of a power of a finite epistandard.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>R EP</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>S B</head><p>The following example shows that there exist words unbalanced which belong to EP ∩ S: w = aadaacaad is not a circularly balanced word, w ∈ EP and w ∈ S.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Further works</head><p>To study, in a quantitative way, the compression ratio of BWT-based compressors in terms of the Local Entropy.</p><p>To characterize the words in S (we have characterized the balanced words in S).</p><p>To characterize all words having a clusterized BWT transform (the set S is a proper subclass of words having a clusterized BWT transform): the order of letters in the output of BWT is very important. For instance, the BWT of the word w = abacad is a clustered word, indeed we have that bwt(w) = dbca 3 , but although w is a circularly balanced word, it is not a circularly rich word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Further works</head><p>To study, in a quantitative way, the compression ratio of BWT-based compressors in terms of the Local Entropy.</p><p>To characterize the words in S (we have characterized the balanced words in S).</p><p>To characterize all words having a clusterized BWT transform (the set S is a proper subclass of words having a clusterized BWT transform): the order of letters in the output of BWT is very important. For instance, the BWT of the word w = abacad is a clustered word, indeed we have that bwt(w) = dbca 3 , but although w is a circularly balanced word, it is not a circularly rich word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Further works</head><p>To study, in a quantitative way, the compression ratio of BWT-based compressors in terms of the Local Entropy.</p><p>To characterize the words in S (we have characterized the balanced words in S).</p><p>To characterize all words having a clusterized BWT transform (the set S is a proper subclass of words having a clusterized BWT transform): the order of letters in the output of BWT is very important. For instance, the BWT of the word w = abacad is a clustered word, indeed we have that bwt(w) = dbca 3 , but although w is a circularly balanced word, it is not a circularly rich word.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>For</head><label></label><figDesc>all i = I, the character L[i] is followed in v by F [i];</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_24"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_30"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_32"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_34"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_36"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_38"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_40"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_42"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_44"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_46"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_48"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4. The first character of v is F [I].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_49"><head></head><label></label><figDesc>that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_50"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4.The first character ofv is F [I].For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.For all i = I, the character L[i] is followed in v by F [i]; that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_51"><head></head><label></label><figDesc>Reverse bwt(v) = L = nntltaoriiena and I = 4.The first character ofv is F [I].For any character α, the ith occurrence of α in F corresponds to the ith occurrence of α in L.For all i = I, the character L[i] is followed in v by F [i]; that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words.Why Useful?INTUITION Let us consider the effect of BWT on a segment of a BWT-sorted file for Shakespeares Hamlet.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_52"><head></head><label></label><figDesc>finite or infinite) word v is balanced if for each letter a of the alphabet A and for all factors u and u of v s.t. |u| = |u | we have that ||u| a − |u | a | ≤ 1 A finite word v is circularly balanced if all its conjugates are balanced. Example w = cacbcac is a circularly balanced word. v = acacbbc is an unbalanced word. u = babaabaab is a balanced but not circularly balanced word. Denote by B the set of circularly balanced words. Laurent Vuillon. Balanced words. Bull. Belg. Math.Soc., 10(5):787-805, 2003. Balanced words: definition A (finite or infinite) word v is balanced if for each letter a of the alphabet A and for all factors u and u of v s.t. |u| = |u | we have that ||u| a − |u | a | ≤ 1 A finite word v is circularly balanced if all its conjugates are balanced. Example w = cacbcac is a circularly balanced word. v = acacbbc is an unbalanced word. u = babaabaab is a balanced but not circularly balanced word. Denote by B the set of circularly balanced words. Laurent Vuillon. Balanced words. Bull. Belg. Math.Soc., 10(5):787-805, 2003.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_53"><head></head><label></label><figDesc>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. Wei, 1986 G. Manzini, 2001 H. Kaplan, S. Landau and E. Verbin, 2007</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_54"><head></head><label></label><figDesc>Local entropy (LE) was considered by J. L. Bentley, D. D. Sleator, R. E. Tarjan, and V. K. Wei, 1986 G. Manzini, 2001 H. Kaplan, S. Landau and E. Verbin, 2007</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_56"><head></head><label></label><figDesc>TheoremA word v ∈ S if and only if M = R.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_57"><head>SoSo</head><label></label><figDesc>TheoremA word v ∈ S if and only if M = R.[v] and its factors are closed under reverse. Under these conditions each conjugate of v has the two palindrome property (cf.Simpson and  Puglisi, 2008). A word v has the two palindrome property if v is product of two palindromes, i.e. it can be written as xy where x and y are palindromes or empty.[v] and its factors are closed under reverse. Under these conditions each conjugate of v has the two palindrome property (cf.Simpson and  Puglisi, 2008). A word v has the two palindrome property if v is product of two palindromes, i.e. it can be written as xy where x and y are palindromes or empty.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head></head><label></label><figDesc>Notice that if we except the index, all the mutual conjugate words have the same Burrows-Wheeler Transform. Hence, the BWT can be thought as a transformation acting on circular words.</figDesc><table>For all i = I, the character L[i] 
is followed in v by F [i]; 

v = i 

1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 

F 
a 
a 
e 
i 
i 
l 
n 
n 
n 
o 
r 
t 
t 

L 
n 
n 
t 
l 
t 
a 
o 
r 
i 
i 
e 
n 
a 

1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head></head><label></label><figDesc>Balanced words: definitionA (finite or infinite) word v is balanced if for each letter a of the alphabet A and for all factors u and u of v s.t. |u| = |u | we have that ||u| a − |u | a | ≤ 1A finite word v is circularly balanced if all its conjugates are balanced.Example w = cacbcac is a circularly balanced word. v = acacbbc is an unbalanced word. u = babaabaab is a balanced but not circularly balanced word.Denote by B the set of circularly balanced words.</figDesc><table>Laurent Vuillon. Balanced words. Bull. Belg. Math.Soc., 10(5):787-805, 
2003. 
Balanced words 

Definition 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_18" validated="false"><head></head><label></label><figDesc>X. Droubay, J. Justin, G. Pirillo, Episturmian words and some constructions of de Luca and. Rauzy, Theoret. Comput. Sci. 255, 2001. A. Glen, J. Justin, S. Widmer, and L. Q. Zamboni. Palindromic richness.</figDesc><table>European Journal of Combinatorics, 30(2):510-531, 2009. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_19" validated="false"><head></head><label></label><figDesc>X. Droubay, J. Justin, G. Pirillo, Episturmian words and some constructions of de Luca and. Rauzy, Theoret. Comput. Sci. 255, 2001. A. Glen, J. Justin, S. Widmer, and L. Q. Zamboni. Palindromic richness. European Journal of Combinatorics, 30(2):510-531, 2009.</figDesc><table>Circularly rich words 

Lemma (Glen, Justin, Widmer and Zamboni, 2009) 

</table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Palermo, 17 Marzo 2010</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">G. RosonePalermo, 17 Marzo 2010</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">w is a simple BWT word; 2 w is a circularly rich word; 3 w is a conjugate of a power of a finite epistandard word.G. RosonePalermo, 17 Marzo 2010</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">t = pa 2 , with p = P al(a m 1 a k a k−1 · · · a 3 ), where k ≥ 3 and m ≥ 1;2 t = pa 2 , with p = P al(a 1 a k a k−1 · · · a k− a 1 a k− −1 a k− −2 · · · a 3 ),where 0 ≤ ≤ k − 4 and k ≥ 4; 3 t = P al(a 1 a k a k−1 · · · a 2 ), where k ≥ 3 (Fraenkel's words). where the operator P al is the iterated palindromic closure function.</note>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1">t = pa 2 , with p = P al(a m 1 a k a k−1 · · · a 3 ), where k ≥ 3 and m ≥ 1;2 t = pa 2 , with p = P al(a 1 a k a k−1 · · · a k− a 1 a k− −1 a k− −2 · · · a 3 ),where 0 ≤ ≤ k − 4 and k ≥ 4; 3 t = P al(a 1 a k a k−1 · · · a 2 ), where k ≥ 3 (Fraenkel's words). where the operator P al is the iterated palindromic closure function.</note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.  An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standard words</head><p>Directive sequence d 1 , d 2 , . . . , d n , . . ., with d 1 ≥ 0 and d i &gt; 0 for i = 2, . . . , n, . . .. s 0 = b s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standard words</head><p>Directive sequence d 1 , d 2 , . . . , d n , . . ., with d 1 ≥ 0 and d i &gt; 0 for i = 2, . . . , n, . . .. s 0 = b s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standard words</head><p>Directive sequence d 1 , d 2 , . . . , d n , . . ., with d 1 ≥ 0 and d i &gt; 0 for i = 2, . . . , n, . . .. s 0 = b s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Standard words</head><p>Directive sequence d 1 , d 2 , . . . , d n , . . ., with d 1 ≥ 0 and d i &gt; 0 for i = 2, . . . , n, . . .. s 0 = b s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head><p>s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head><p>s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences.</p><p>An infinite aperiodic sequence v is balanced if and only if v is a sturmian sequence.</p><p>An infinite periodic sequence v ω is balanced if and only if v is a conjugate of a standard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fibonacci words</head><p>s 1 = a s n+1 = s dn n s n−1 for n ≥ 1 Standard words are special prefixes of Sturmian sequences. Let s be an infinite word, then a factor u of s is right (resp. left) special if there exist x, y ∈ A, x = y, such that ux, uy ∈ F (s) (resp. xu, yu ∈ F (s)). Let s be an infinite word, then a factor u of s is right (resp. left) special if there exist x, y ∈ A, x = y, such that ux, uy ∈ F (s) (resp. xu, yu ∈ F (s)). Let s be an infinite word, then a factor u of s is right (resp. left) special if there exist x, y ∈ A, x = y, such that ux, uy ∈ F (s) (resp. xu, yu ∈ F (s)). Let |A| = k. A word v ∈ A * is called finite epistandard if v is an element of a k-tuples R n , for some n = 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Matrix M and R</head><p>We denote by EP the set of words that are powers of a conjugate of a finite epistandard word.</p><p>Proof: 3 → 1: The finite balanced epistandard words belong to S.</p><p>From a result of Paquin and Vuillon <ref type="formula">(2006)</ref>, one can prove that each finite balanced epistandard word t is of the form:</p><p>Proof: 3 → 1: The finite balanced epistandard words belong to S.</p><p>From a result of Paquin and Vuillon <ref type="formula">(2006)</ref>, one can prove that each finite balanced epistandard word t is of the form:</p><p>Proof: 2 ↔ 3: w is circularly rich if and only if w is a conjugate of a power of a finite epistandard.</p><p>The proof is a consequence of the following results:</p><p>The set of the episturmian sequences is a subset of the set of the rich words (Glen, Justin, Widmer and Zamboni, 2009).</p><p>Recurrent balanced rich infinite words are precisely the balanced episturmian words (Glen, Justin, Widmer and Zamboni, 2009). Hence a balanced circularly rich word coincides with a conjugate of a power of a balanced epistandard word.</p><p>Proof: 2 ↔ 3: w is circularly rich if and only if w is a conjugate of a power of a finite epistandard.</p><p>The proof is a consequence of the following results:</p><p>The set of the episturmian sequences is a subset of the set of the rich words (Glen, Justin, Widmer and Zamboni, 2009).</p><p>Recurrent balanced rich infinite words are precisely the balanced episturmian words (Glen, Justin, Widmer and Zamboni, 2009). Hence a balanced circularly rich word coincides with a conjugate of a power of a balanced epistandard word.</p><p>Proof: 2 ↔ 3: w is circularly rich if and only if w is a conjugate of a power of a finite epistandard.</p><p>The proof is a consequence of the following results:</p><p>The set of the episturmian sequences is a subset of the set of the rich words (Glen, Justin, Widmer and Zamboni, 2009).</p><p>Recurrent balanced rich infinite words are precisely the balanced episturmian words <ref type="bibr">(Glen, Justin, Widmer and Zamboni, 2009)</ref>. Hence a balanced circularly rich word coincides with a conjugate of a power of a balanced epistandard word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>"The regularity of the English text that BWT-based compressors exploit" is related to the balancing properties of the text itself.</p><p>Empirical observations and theoretical results support the hypothesis: the more balanced the input word is, the more local similarity one has after BWT, and, as a consequence, the better the compression is.</p><p>Apart from their interest for the study of the clustering effect of BWT (and of optimal performances of BWT-based compressors), our results can be considered as a contribution to combinatorics of episturmian sequences, and could provide new insight on Fraenkel's conjecture.</p><p>The main purpose of this investigation is to state a link between methods from Combinatorics on Words and techniques from Data Compression, in order to obtain a deeper comprehension of both research field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>"The regularity of the English text that BWT-based compressors exploit" is related to the balancing properties of the text itself.</p><p>Empirical observations and theoretical results support the hypothesis: the more balanced the input word is, the more local similarity one has after BWT, and, as a consequence, the better the compression is.</p><p>Apart from their interest for the study of the clustering effect of BWT (and of optimal performances of BWT-based compressors), our results can be considered as a contribution to combinatorics of episturmian sequences, and could provide new insight on Fraenkel's conjecture.</p><p>The main purpose of this investigation is to state a link between methods from Combinatorics on Words and techniques from Data Compression, in order to obtain a deeper comprehension of both research field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>"The regularity of the English text that BWT-based compressors exploit" is related to the balancing properties of the text itself.</p><p>Empirical observations and theoretical results support the hypothesis: the more balanced the input word is, the more local similarity one has after BWT, and, as a consequence, the better the compression is.</p><p>Apart from their interest for the study of the clustering effect of BWT (and of optimal performances of BWT-based compressors), our results can be considered as a contribution to combinatorics of episturmian sequences, and could provide new insight on Fraenkel's conjecture.</p><p>The main purpose of this investigation is to state a link between methods from Combinatorics on Words and techniques from Data Compression, in order to obtain a deeper comprehension of both research field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>"The regularity of the English text that BWT-based compressors exploit" is related to the balancing properties of the text itself.</p><p>Empirical observations and theoretical results support the hypothesis: the more balanced the input word is, the more local similarity one has after BWT, and, as a consequence, the better the compression is.</p><p>Apart from their interest for the study of the clustering effect of BWT (and of optimal performances of BWT-based compressors), our results can be considered as a contribution to combinatorics of episturmian sequences, and could provide new insight on Fraenkel's conjecture.</p><p>The main purpose of this investigation is to state a link between methods from Combinatorics on Words and techniques from Data Compression, in order to obtain a deeper comprehension of both research field.</p><p>Thank you for your attention!</p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
