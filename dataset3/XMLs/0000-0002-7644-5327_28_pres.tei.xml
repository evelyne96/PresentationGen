<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/sda1/Dissertation/grobid/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Action-Graph Games: A Compact Representation for Game Theory Based on joint papers with</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Leyton-Brown</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Computer Science University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of Toronto</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Navin</forename><forename type="middle">A R</forename><surname>Bhat</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Computer Science University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of Toronto</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><forename type="middle">Xin</forename><surname>Jiang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Computer Science University of British Columbia</orgName>
								<orgName type="institution" key="instit2">University of Toronto</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Action-Graph Games: A Compact Representation for Game Theory Based on joint papers with</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-24T15:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>graph structure independent of # agents overlapping action sets context-specific independence without strict independence vendors sell either chocolate or vanilla ice cream at one of four stations along a beach chocolate (C) vendors; vanilla (V) vendors; can sell C/V, but only on the west side.</p><p>competition between nearby sellers of same type; synergy between nearby different types Elaborated Ice Cream Vendor Problem Inspired by <ref type="bibr">[Hotelling, 1929]</ref> V1 V3 C4 V4 V2 C3 C2 C1</p><p>The Job Market Problem Each player chooses a level of training Players' utilities are the sum of: • a constant cost: difficulty; tuition; foregone wages • a variable reward, depending on:</p><p>-How many jobs prefer workers with this training, and how desirable are the jobs? -How many other jobs are willing to take such workers as a second choice, and how good are these jobs?</p><p>• Employers will take workers who are overqualified, but only by one degree. • They will also interchange similar degrees, but only at the same level.</p><p>-How many other graduates want the same jobs? AGGs are more compact than the normal form when the game exhibits either or both of the following properties:</p><p>1. Context-Specific Independence:</p><p>• pairs of agents can choose actions that are not neighbors in the action graph 2. Anonymity:</p><p>• multiple action profiles yield the same configuration Size of the AGG representation How many payoffs do we need to store in an AGG?</p><p>• Bounded by .</p><p>where I is the max in-degree of the action graph</p><p>• When I is bounded by a constant:  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Function Nodes</head><p>• To exploit this structure, introduce function nodes:</p><p>-The "configuration" of a function node is a (given) function of the configuration of its neighbors: ( ) = ( (ν( )))</p><p>• Coffee-shop example: for each action node , introduce:</p><p>-One function node with adjacent actions as neighbours The Coffee Shop Problem</p><p>• Now the red node has only 3 incoming edges:</p><p>itself, the blue function node and the orange function node so, the action-graph now has in-degree 3 -, the number of different configurations, is polynomial thus, the first sum is over polynomially-many elements • Bad news:</p><formula xml:id="formula_0">V1 V3 C4 V4 V2 C3 C2 C1 V1 V2 C2 C1 ∅ Computing</formula><p>-, the number of pure-action profiles corresponding to a given configuration, is exponential in the number of agents thus, the second sum is over exponentially-many elements Dynamic Programming</p><p>• A ray of hope: note that the players' mixed strategies are independent • i.e. σ is a product probability distribution each player affects the configuration independently • We can use dynamic programming to compute the probability of a configuration:</p><p>base case: zero agents and the mixed strategy σ 0 :</p><formula xml:id="formula_1">• Δ 0 = { 0 } • 0 = {0, …, 0} • 0 ( 0 ) = 1</formula><p>then add agents one by one:</p><p>• Δ : the set of configurations that can be built by adding any action the support of player 's mixed strategy to any configuration from Δ -1</p><p>• .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Dynamic Programming</head><p>• Our algorithm makes a polynomial number of updates -# configurations (for a given number of agents) is polynomial cost of adding an agent: # configurations × # actions we need a data structure to manipulate probability distributions over configurations (sequences of integers) which permits quick lookup, addition and enumeration</p><p>• Tries fit the bill often used to store dictionaries (e.g., spell checker)</p><p>• for AGGs, we store strings of integers rather than characters </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Computing with AGGs: Complexity</head><p>• Complexity of our approach:</p><p>• Exponential speedup vs. standard approach:</p><p>• For graphical games encoded as AGGs, same exponential speedup as the special-purpose technique of <ref type="bibr">[Blum, Shelton &amp; Koller, 2002]</ref> AGGs with Function Nodes (AGGFNs)</p><p>• Our dynamic programming algorithm does not work for arbitrary AGGFNs players are no longer guaranteed to affect independently</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>• Definition: An AGGFN is contribution-independent (CI) if</head><p>all function nodes have only action nodes as their neighbors there exists a commutative and associative operator *, and for each action node ∈ an integer , such that given an action profile , for all function nodes ∈ , . .</p><p>e.g., the coffee-shop game is CI, where * is sum and ∀ = 1</p><p>• Theorem: Our dynamic programming algorithm works with AGGFNs that are contribution-independent AGG grows polynomially   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>Action-Graph Games • Fully-expressive compact representation of games exhibiting context-specific independence and/or strict independence</p><p>• Permit efficient computation of expected utility under a mixed strategy, which allows efficient computation of e.g., best response, Nash equilibrium, etc.</p><p>• Generalizes graphical games </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>•</head><label></label><figDesc>set of players: want to open coffee shops • actions: choose a location for your shop, or choose not to enter the market • utility: profitability of a location some locations might have more customers, and so might be better ex ante utility also depends on the number of other players who choose the same or an adjacent location</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>-</head><label></label><figDesc>polynomial size: (|S| I ) in contrast, size of normal form is (|S| )• Asymptotically, never larger than the normal form</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>•</head><label></label><figDesc>( ' ) = total # of shops in surrounding nodes -Similarly, a function node with non-adjacent actions as neighbours 6 × 5 Coffee Shop Problem: function nodes for the red node</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>-</head><label></label><figDesc>both lookup and insertion complexity is linear (# actions) enumeration can also be done in linear time (# configurations)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Game, 4 players, ⌧ × 5 grid, AGG vs. GameTracer using 1000 random strategy profiles with full support AGG grows linearly, NF grows as higher-order polynomial NF time vs. AGG time Coffee Shop Game, 4 × 4 grid, Govindan-Wilson Algorithm Jacobians computed using AGGs vs. GameTracer using NF Exactly the same equilibria were found using both representations Average across 10 initial perturbations; error bars indicate stdev As number of rows grows, AGG speedup increases roughly linearly varying number of players</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>•</head><label></label><figDesc>Experimentally: much faster than the normal form http://www.cs.ubc.ca/˜kevinlb google://"Kevin Leyton-Brown"</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>The Coffee Shop Problem Revisited• What if utility also depends on total # shops?• Now action graph has in-degree |A|</figDesc><table>Graphical Games are Compact as AGGs 

Node utility function 
Local game matrix 

Bipartite graphs between action sets 
Edge 

Action set box 
Agent node 

AGG 
GG 

-NF &amp; Graphical Game representations: (|A| ) 
-AGG representation: 
( 
|A| ) 
-when |A| is held constant, the AGG 
representation is polynomial in 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>with AGGs: Projection</figDesc><table>V3 

C4 

V4 

C3 

∅ 

Computing with AGGs: Projection 

• Projection captures context-specific independence and 
strict independence 

Computing with AGGs: Anonymity 

• Writing in terms of the configuration captures anonymity 

Computing with AGGs: Anonymity 

• Good news: 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head></head><label></label><figDesc>Experimental Results: Nash Equilibrium ratio of NF time vs. AGG time Coffee Shop Game, ⌧ × 4 grid, Govindan-Wilson Algorithm Jacobians computed using AGGs vs. GameTracer using NF Exactly the same equilibria were found using both representations Average across 10 initial perturbations; error bars indicate stdev As number of rows grows, AGG speedup increases roughly linearly varying number of actions Coffee Shop Game: Example Equilibrium • Utility Function: 5 -⌧ 3 -2 -0.5 ⌧, , are # of shops in same location, one block away, further away ⌧, , are # of shops in same location, one block away, further away ⌧, , are # of shops in same location, one block away, further away • 8 players; one chooses not to participate</figDesc><table>0 

1 

2 

3 

4 

5 

6 

7 

13 
17 
21 
25 
29 
33 
37 
41 

number of actions 

• 5 players 

1 
1 
-1.5 
1 

1 
2 
-1.5 
2 

-1.5 
-6 
-12.5 
-6 

2 
-1.5 
1.5 
1.5 

Coffee Shop Game: Example Equilibrium 

• Utility Function: 5 -⌧ 3 -2 -0.5 

⌧, , 
are # of shops in same location, one block away, further away 

• 6 players 

0.5 
-2 
-2 
-2 

1.5 
-2 
1.5 
1.5 

-2 
-13 
-13 
-13 

1.5 
-2 
1.5 
1.5 

Coffee Shop Game: Example Equilibrium 

• Utility Function: 5 -⌧ 3 -2 -0.5 

• 7 players 

0.5 
-2.5 
-2.5 
-2.5 

0.5 
-7 
0.5 
0.5 

-2.5 
-13.5 
-13.5 
-13.5 

1 
-7 
0.5 
0.5 

Coffee Shop Game: Example Equilibrium 

• Utility Function: 5 -⌧ 3 -2 -0.5 

0.5 
-2.5 
-2.5 
-2.5 

0.5 
-7 
0.5 
0.5 

-2.5 
-13.5 
-13.5 
-13.5 

1 
-7 
0.5 
0.5 

</table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">• but still doesn't effectively capture game structure • given 's action, his payoff depends only on 3 quantities! 6 × 5 Coffee Shop Problem: projected action graph at the red node</note>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
