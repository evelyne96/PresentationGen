<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/sda1/Dissertation/grobid/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lin</forename><surname>Xu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Holger</forename><forename type="middle">H</forename><surname>Hoos</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Leyton-Brown</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of British Columbia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main" xml:lang="en">Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</title>
						<title level="a" xml:lang="en">work: [Rice, 1976]; [Leyton-Brown, Nudelman &amp; Shoham, 2003; 2009]; [Guerri &amp; Milano, 2004]; [Nudelman, Leyton-Brown, Shoham &amp; Hoos, 2004]</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-24T15:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<textClass>
				<keywords>
					<term>Xu, Hoos, Leyton-Brown Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection Some particularly related work: [Gratch &amp; Dejong, 1992]</term>
					<term>[Fukunaga, 2002]</term>
					<term>[Balaprakash, Birattari &amp; Stutzle, 2007]</term>
					<term>[Hutter, Babic, Hoos &amp; Hu, 2007]</term>
					<term>[Ansotegui, Sellmann &amp; Tierney, 2009]</term>
					<term>[Hutter, Hoos, Stutzle &amp; Leyton-Brown, 2009]</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SATzilla</head> [Xu, Hutter, Hoos, Leyton-Brown, 2007; 2008]    <p>portfolio-based algorithm selection SATenstein [KhudaBukhsh, Xu, Hoos, Leyton-Brown, 2009]    algorithm design via automatic configuration Two automated algorithm design ideas Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection Exploit per-instance variation between solvers using learned runtime models practical: e.g., won 10 medals in 2007, 2009 SAT competitions fully automated: requires only cluster time rather than human design effort Key drawback:</p><p>requires a set of strong, relatively uncorrelated candidate solvers can't be applied in domains for which such solvers do not exist SATzilla [Xu, Hutter, Hoos, Leyton-Brown, 2007; 2008]    portfolio-based algorithm selection Two automated algorithm design ideas Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection Some particularly related • Instead of manually exploring a design space, build a highly-parameterized algorithm and then configure it automatically • Can find powerful, novel designs matched or outperformed existing SLS algorithms on six SAT domains • But: only produces single algorithms designed to perform well on the entire training set SATenstein [KhudaBukhsh, Xu, Hoos, Leyton-Brown, 2009]    algorithm design via automatic configuration Two automated algorithm design ideas</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Exploit per-instance variation between solvers using learned runtime models practical: e.g., won 10 medals in 2007, 2009 SAT competitions fully automated: requires only cluster time rather than human design effort Key drawback:</p><p>requires a set of strong, relatively uncorrelated candidate solvers can't be applied in domains for which such solvers do not exist SATzilla <ref type="bibr">[Xu, Hutter, Hoos, Leyton-Brown, 2007;</ref><ref type="bibr">2008]</ref> portfolio-based algorithm selection</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Two automated algorithm design ideas</head><p>Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection Some particularly related work: <ref type="bibr">[Rice, 1976]</ref>; <ref type="bibr">[Leyton-Brown, Nudelman &amp; Shoham, 2003;</ref><ref type="bibr">2009]</ref>; <ref type="bibr">[Guerri &amp; Milano, 2004]</ref>; <ref type="bibr">[Nudelman, Leyton-Brown, Shoham &amp; Hoos, 2004]</ref> • Instead of manually exploring a design space, build a highly-parameterized algorithm and then configure it automatically • Can find powerful, novel designs matched or outperformed existing SLS algorithms on six SAT domains • But: only produces single algorithms designed to perform well on the entire training set SATenstein <ref type="bibr">[KhudaBukhsh, Xu, Hoos, Leyton-Brown, 2009]</ref> algorithm design via automatic configuration</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Two automated algorithm design ideas</head><p>Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection Some particularly related work: <ref type="bibr">[Gratch &amp; Dejong, 1992]</ref>; <ref type="bibr">[Fukunaga, 2002]</ref>; <ref type="bibr">[Balaprakash, Birattari &amp; Stutzle, 2007]</ref>; <ref type="bibr">[Hutter, Babic, Hoos &amp; Hu, 2007]</ref> Starting from a single parameterized algorithm, automatically find a set of uncorrelated configurations that can be used to build a strong portfolio.  <ref type="bibr">[Xu, Hutter, Hoos, Leyton-Brown, 2007;</ref><ref type="bibr">2008]</ref> SATenstein: Automated Algorithm Design <ref type="bibr">[KhudaBukhsh, Xu, Hoos, Leyton-Brown, 2009]</ref> • Designer creates highlyparameterized algorithm from existing components • Two proposals for synthesis of selection-based portfolios:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Plan of This Talk</head><p>1. "Boosting as a Metaphor for Algorithm Design" <ref type="bibr">[L-B et al., 2003; 2009]</ref> 2. Stochastic Offline Programming <ref type="bibr">[Malitsky &amp; Sellmann, 2009]</ref> • partition instances into k clusters based on features • find best-performing algorithm for each cluster ⇒ assumes that all algorithms repeatedly (1) sample from a distribution over heuristics;</p><p>(2) use the sampled heuristic for one search step ⇒ best-performing algorithms identified using a custom optimization method ⇒ our goal is to construct an entirely general method for portfolio synthesis</p><p>• CP-Hydra <ref type="bibr">[O'Mahony, Hebrard, Holland, Nugent, &amp; O'Sullivan, 2008]</ref> selection-based portfolio for constraint programming • Core idea re-weight instance distribution to emphasize problems on which an existing portfolio P performs poorly</p><p>• Interpretation as an automatic procedure:</p><p>generate a new distribution D that is hard for P find a new solver maximizing average performance on D</p><p>• We intended to implement this procedure. But:</p><p>discovered examples in which the algorithm with best average performance does not improve the portfolio thus, the portfolio synthesis procedure can stagnate, even when other, helpful algorithms exist Boosting as a Metaphor for Algorithm Design <ref type="bibr">[Leyton-Brown, Nudelman, Andrew, McFadden, Shoham, 2003]</ref>; <ref type="bibr">[Leyton-Brown, Nudelman, Shoham, 2009]</ref> Hydra: Dynamic Performance Metric</p><p>• Avoid stagnation via a dynamic performance metric:</p><p>return performance of s when s outperforms P return performance of P otherwise</p><p>• Intuitively: s is scored for its marginal contribution to P</p><p>• This metric is given to an off-the-shelf configurator, which optimizes it to find a new configuration s*</p><p>• Thus, we retain the same core idea as "boosting"</p><p>build a new algorithm that explicitly aims to improve upon an existing portfolio</p><p>• Contrast with Stochastic Offline Programming:</p><p>algorithms target sets of instances having very different features these feature differences can be irrelevant to algorithm performance </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</figDesc><table>Background 

-SATzilla: Portfolio-Based Algorithm Selection 
-SATenstein: Algorithm Configuration as Design 

Portfolio Synthesis 

-Related Work 
-Hydra 

Experimental Results 

Conclusions and Future Work 
• Given: 
-training set of instances 
-performance metric 
-candidate solvers 
-portfolio builder 
(incl. instance features) 

• Training: 
-collect performance data 
-portfolio builder learns 
predictive models 

• At Runtime: 
-predict performance 
-select solver 

Metric 

Portfolio Builder 

Training Set 

Novel 
Instance 
Portfolio-Based 
Algorithm Selector 

Candidate Solvers 

Selected 
Solver 

SATzilla: Portfolio-Based Algorithm Selection 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</figDesc><table>• Given: 
-training set of instances 
-performance metric 
-parameterized algorithm 
-algorithm configurator 

• Configure algorithm: 
-run configurator on 
training instances 
-output is a configuration 
that optimizes metric 

Parameterized 
Algorithm 

Existing 
Algorithm Components 

Domain 
Expert 

Algorithm 
Configurator 

Metric 

New 
Configuration 

Instance 
set 

SATenstein: Automated Algorithm Design 

• Designer creates highly-
parameterized algorithm 
from existing components 

• Given: 
-training set of instances 
-performance metric 
-parameterized algorithm 
-algorithm configurator 

• Configure algorithm: 
-run configurator on 
training instances 
-output is a configuration 
that optimizes metric 

Parameterized 
Algorithm 

Plan of This Talk 

Background 

-SATzilla: Portfolio-Based Algorithm Selection 
-SATenstein: Algorithm Configuration as Design 

Portfolio Synthesis 

-Related Work 
-Hydra 

Experimental Results 

Conclusions and Future Work 
Related Work 

• Algorithm synthesis; portfolios and online algorithm selection 

[Minton 1993]; [Huberman, Lukose &amp; Hogg 1997]; [Howe et al, 1999]; [Gomes &amp; Selman 2001]; 
[Carchrae &amp; Beck 2005]; [Gagliolo &amp; Schmidhuber 2006]; [Streeter, Golovin &amp; Smith 2007]; 
[Roberts &amp; Howe, 2007]; [Gaspero &amp; Schaerf 2007]; [Monette, Deville &amp; van Hentenryck 2009] 

</table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot">Xu, Hoos, Leyton-Brown. Hydra: Automatically Configuring Algorithms for Portfolio-Based Selection</note>
		</body>
		<back>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
