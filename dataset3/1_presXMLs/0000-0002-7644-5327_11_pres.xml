<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /mnt/sda1/Dissertation/grobid/grobid-0.5.6/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multi-agent reinforcement learning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2019-12-22">December 22, 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schnebli</forename><surname>Zoltan</surname></persName>
						</author>
						<title level="a" type="main">Multi-agent reinforcement learning</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2019-12-22">December 22, 2019</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>

		<encodingDesc>
			<appInfo>
				<application version="0.5.6" ident="GROBID" when="2019-12-24T15:31+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein:
Automatically Building Local Search 
</p>
<p>SAT Solvers From Components
</p>
<p>Ashiqur R. KhudaBukhsh,  Lin Xu, 
Holger H. Hoos,  Kevin Leyton-Brown
</p>
<p>Department of Computer Science
</p>
<p>University of British Columbia 
</p>
<p>Canada</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein?
</p>
<p>• Frankenstein
</p>
<p>– Create “perfect” human being from scavenged 
body parts
</p>
<p>• SATenstein
</p>
<p>– Create high-performance SAT solvers using 
components scavenged from existing solvers</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Algorithm Design Approach
</p>
<p>• Traditional approach
– Hard-code various design choices
– Iteratively conduct small experiments to improve the 
</p>
<p>design
</p>
<p>• Our approach
– Make all design options explicit, encoding them as 
</p>
<p>parameters 
• Results in a generalized, highly parameterized algorithm
• Instantiation produces many different solvers
</p>
<p>– Given a distribution, set the parameters using an 
automatic algorithm configuration procedure</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein
</p>
<p>• A highly parameterized, generalized SLS solver 
built on top of UBCSAT solver framework 
[Tompkins & Hoos, 2004]
</p>
<p>– 3 categories of SLS algorithms
• WalkSAT, G2WSAT, dynamic local search algorithms
</p>
<p>– 25 known algorithms 
</p>
<p>– 41 parameters
</p>
<p>– > 2  × 1011 possible instantiations
</p>
<p>• For each distribution, configured using 
ParamILS [Hutter et al., 2007-2009]</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Related Work
</p>
<p>• SLS SAT solvers 
– GSAT [Selman et al., 1992]
– WalkSAT [Selman et al., 1994]
– SAPS [Hutter et al., 2002]
– gNovelty+ [Pham and Gretton, 2007]
</p>
<p>• UBCSAT [Tompkins & Hoos, 2004]
– SLS solver development framework
</p>
<p>• Genetic programming [Fukunaga, 2002; 2004]
– Evolve variable selection mechanism for SLS solver 
</p>
<p>• SATzilla [Xu et al., 2008]
– Instance-based algorithm selection from portfolio of SAT 
</p>
<p>solvers</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein vs SATzilla
</p>
<p>SATzilla [Xu et al., 2008] SATenstein
• Relatively small number of known • Can instantiate billions of solvers, 
</p>
<p>solvers most never studied before
</p>
<p>• Selects a given algorithm on a per- • Selects a given configuration on a 
instance basis per-distribution basis
</p>
<p>• Creates empirical hardness model • Does not use runtime prediction
from given run-time data
</p>
<p>• The approaches are complementary
• SATenstein solvers can be used in SATzilla
</p>
<p>• Satzilla2009_R in SAT competition 2009
• Gold in random SAT+UNSAT
• 4th in random SAT</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Performance objective
</p>
<p>Penalized Average Runtime (PAR)
</p>
<p>• Want: Minimize mean runtime
• What about capped runs?
</p>
<p>PAR = avg(completed runs + penalty × cutoff time)
</p>
<p>• here: penalty = 10</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Experimental setup
</p>
<p>• 6 well-known distributions of SAT instances
</p>
<p>– Application/Industrial: FAC, CBMC-SE
</p>
<p>– Crafted: QCP, SW-GCP,
</p>
<p>– Random: HGEN, R3SAT
</p>
<p>• 11 challenger algorithms (medal-winning SLS 
solvers in the 2003 - 2008 SAT competitions) </p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Automatic configurator: ParamILS 2.2 [Hutter et al., 2007-2009] 
</p>
<p>• Iterated local search (ILS) based automated 
parameter tuning tool
</p>
<p>• Previously used to tune:
</p>
<p>– SPEAR, a highly parametric DPLL solver [Hutter et al., 2007a]
</p>
<p>– SLS algorithm for timetabling [Chiarandini et al., 2008]
</p>
<p>– CPLEX  for mixed integer programming [Hutter et al., 2009]
</p>
<p>9</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Results
• Factor of 70 - 1000 performance improvement over best 
</p>
<p>challenger on QCP, HGEN, CBMC-SE
</p>
<p>• Factor of 1.4 - 2 performance improvement over best 
challenger on SW-GCP, R3SAT and FAC
</p>
<p>• Improved the state-of-the-art across all the solvers on 
</p>
<p>SW-GCP, QCP , HGEN and R3SAT
</p>
<p>• On CBMC-SE and FAC, reduced the gap between complete 
solvers and SLS solvers </p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>PAR comparison on QCP</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>PAR comparison on CBMC(SE)</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein-LS vs Top 3 challengers on HGEN</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein-LS vs Top 3 challengers on CBMC-SE</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>SATenstein-LS vs Oracle on CBMC-SE 
</p>
<p>• Oracle selects the challenger with minimum median 
runtime on a per-instance basis</p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Conclusion
• SATenstein: A new approach for building high-
</p>
<p>performance algorithms.
– A framework that flexibly combines components from 
</p>
<p>high-performance algorithms
</p>
<p>– A powerful algorithm configuration tool  
</p>
<p>• New state-of-the-art SAT solvers in 4 distributions 
</p>
<p>• Substantial improvement on 3 distributions 
</p>
<p>(QCP, HGEN, CBMC-SE)
</p>
<p>• Reduced gap between DPLL solvers and SLS solvers 
on CBMC-SE </p>
</div>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>Future Work 
</p>
<p>• Use of preprocessing 
</p>
<p>• Mixed strategies 
</p>
<p>• Better understanding of the configurations found
</p>
<p>• More problem distributions / other problems
</p>
<p>17</p>
</div>
</body>
		<back>
			<div type="references">

				<listBibl>


				</listBibl>
			</div>
		</back>
	</text>
</TEI>
